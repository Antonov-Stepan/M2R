"""
Newton's Method for solving travelling wave solution

References:
"""

import numpy as np
import matplotlib.pyplot as plt


def hilbert_transform(u, x):
    """Compute the Hilbert transform using finite difference and quadrature."""
    N = len(u)
    dx = x[1] - x[0]
    H = np.zeros(N)

    for i in range(N):
        integral = 0
        for j in range(N):
            if j != i:
                denom = x[i] - x[j]
                integral += u[j] / denom
        H[i] = (1/np.pi) * integral * dx

    return H


def f(u, x, c, amplitude):
    """Return the evaluation of the function"""
    dx = x[1] - x[0]
    ux = first_derivate(u, dx)
    uxx = second_derivative(u, dx)
    H_ux = hilbert_transform(ux, x)
    H_uux = hilbert_transform(u * ux, x)
    f = (-c * H_ux) - uxx + H_uux
    constraint = u[-1] - u[0] - amplitude
    return np.append(f, constraint)


def first_derivate(u, dx):
    """Derivative using finite difference method"""

    ux = np.zeros(len(u))
    # using forward and backwards euler for end points and
    # then using central differences for all other points

    # forward
    ux[0] = forward_euler(u, dx)
    # backward
    ux[-1] = backward_euler(u, dx)
    # central
    ux[1:-1] = (u[2:] - u[:-2])/(2*dx)
    return ux


def forward_euler(u, dx):
    return (u[1] - u[0])/dx


def backward_euler(u, dx):
    return (u[-1] - u[-2])/dx


def second_derivative(u, dx):
    """Second derivative using central difference"""
    uxx = np.zeros(len(u))

    ux = first_derivate(u, dx)
    uxx[0] = forward_euler(ux, dx)
    uxx[-1] = backward_euler(ux, dx)
    uxx[1:-1] = (u[2:] - (2*u[1-1]) + u[:-2])/(dx**2)
    return uxx


def jacobian(u, x, c, amplitude, res):
    """Computes the Jacobian"""
    N = len(u)
    delta = 10**-7
    J = np.zeros((N+1, N+1))

    # w.r.t u
    for j in range(N):
        delta_uj = np.zeros(N)
        delta_uj += u
        delta_uj[j] += delta
        delta_res = f(delta_uj, x, c, amplitude)
        J[:, j] = (delta_res - res) / delta

    # w.r.t c
    delta_c_res = f(u, x, c + delta, amplitude)
    J[:, -1] = (delta_c_res - res) / delta

    return J


def newton_meth(amp):
    """Solve the travelling wave solution with newton's method"""

    # create grid
    N = 20
    L = np.pi
    X = np.linspace(-L, L, num=N, endpoint=False)

    # initial guess
    u = (amp/2)*np.cos(X)
    plt.plot(X, u, label="Initial Guess")
    c = 1.0
    res = f(u, X, c, amp)
    err = np.max(np.abs(res))

    # newton
    while err > 10**-10:
        J = jacobian(u, X, c, amp, res)
        corr = np.linalg.solve(-J, res)
        u += corr[:-1]
        c += corr[-1]
        res = f(u, X, c, amp)
        err = np.max(np.abs(res))

    plt.plot(X, u, label="Solution")
    plt.title(f"Travelling wave solution with {N} grid points")
    plt.xlabel("X")
    plt.ylabel("u")
    plt.legend()
    plt.grid(True)
    # plt.plot(X, f(u, k, k_sign, c, amp)[:-1], label="f")
    plt.show()
    print(f"c estimate:{c}")


def newton_meth2(amp):
    """Only solving half the solution"""

    # create grid
    N = 20
    # h = half
    Nh = N//2 + 1
    L = np.pi
    X = np.linspace(-L, L, num=N, endpoint=False)
    x = np.linspace(-L, 0, num=Nh, endpoint=True)

    # initial guess
    u = (amp/2)*np.cos(x)
    # full initial
    uf = np.concatenate((u, u[-2:0:-1]))
    plt.plot(X, uf, label="Initial Guess")
    c = 1.0
    res = f(u, x, c, amp)
    err = np.max(np.abs(res))

    # newton
    while err > 10**-10:
        J = jacobian(u, x, c, amp, res)
        corr = np.linalg.solve(-J, res)
        u += corr[:-1]
        c += corr[-1]
        res = f(u, x, c, amp)
        err = np.max(np.abs(res))

    # final u
    uf = np.concatenate((u, u[-2:0:-1]))
    plt.plot(X, uf, label="Solution")
    plt.title(f"Travelling wave solution with {N} grid points")
    plt.xlabel("X")
    plt.ylabel("u")
    plt.legend()
    plt.grid(True)
    # plt.plot(X, f(u, k, k_sign, c, amp)[:-1], label="f")
    plt.show()
    print(f"c estimate:{c}")


amp = 0.01
# newton_meth(amp)
newton_meth2(amp)
